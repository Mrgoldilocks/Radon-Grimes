/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as ProxyRouteImport } from './routes/proxy'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as PreferencesRouteImport } from './routes/preferences'
import { Route as GamesRouteImport } from './routes/games'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TagTagRouteImport } from './routes/tag/$tag'
import { Route as GameGameidRouteImport } from './routes/game/$gameid'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const ProxyRoute = ProxyRouteImport.update({
  id: '/proxy',
  path: '/proxy',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const PreferencesRoute = PreferencesRouteImport.update({
  id: '/preferences',
  path: '/preferences',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesRoute = GamesRouteImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TagTagRoute = TagTagRouteImport.update({
  id: '/tag/$tag',
  path: '/tag/$tag',
  getParentRoute: () => rootRouteImport,
} as any)
const GameGameidRoute = GameGameidRouteImport.update({
  id: '/game/$gameid',
  path: '/game/$gameid',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/games': typeof GamesRoute
  '/preferences': typeof PreferencesRoute
  '/privacy': typeof PrivacyRoute
  '/proxy': typeof ProxyRoute
  '/terms': typeof TermsRoute
  '/game/$gameid': typeof GameGameidRoute
  '/tag/$tag': typeof TagTagRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/games': typeof GamesRoute
  '/preferences': typeof PreferencesRoute
  '/privacy': typeof PrivacyRoute
  '/proxy': typeof ProxyRoute
  '/terms': typeof TermsRoute
  '/game/$gameid': typeof GameGameidRoute
  '/tag/$tag': typeof TagTagRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/games': typeof GamesRoute
  '/preferences': typeof PreferencesRoute
  '/privacy': typeof PrivacyRoute
  '/proxy': typeof ProxyRoute
  '/terms': typeof TermsRoute
  '/game/$gameid': typeof GameGameidRoute
  '/tag/$tag': typeof TagTagRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/games'
    | '/preferences'
    | '/privacy'
    | '/proxy'
    | '/terms'
    | '/game/$gameid'
    | '/tag/$tag'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/games'
    | '/preferences'
    | '/privacy'
    | '/proxy'
    | '/terms'
    | '/game/$gameid'
    | '/tag/$tag'
  id:
    | '__root__'
    | '/'
    | '/games'
    | '/preferences'
    | '/privacy'
    | '/proxy'
    | '/terms'
    | '/game/$gameid'
    | '/tag/$tag'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GamesRoute: typeof GamesRoute
  PreferencesRoute: typeof PreferencesRoute
  PrivacyRoute: typeof PrivacyRoute
  ProxyRoute: typeof ProxyRoute
  TermsRoute: typeof TermsRoute
  GameGameidRoute: typeof GameGameidRoute
  TagTagRoute: typeof TagTagRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/proxy': {
      id: '/proxy'
      path: '/proxy'
      fullPath: '/proxy'
      preLoaderRoute: typeof ProxyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/preferences': {
      id: '/preferences'
      path: '/preferences'
      fullPath: '/preferences'
      preLoaderRoute: typeof PreferencesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games': {
      id: '/games'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof GamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tag/$tag': {
      id: '/tag/$tag'
      path: '/tag/$tag'
      fullPath: '/tag/$tag'
      preLoaderRoute: typeof TagTagRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/$gameid': {
      id: '/game/$gameid'
      path: '/game/$gameid'
      fullPath: '/game/$gameid'
      preLoaderRoute: typeof GameGameidRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GamesRoute: GamesRoute,
  PreferencesRoute: PreferencesRoute,
  PrivacyRoute: PrivacyRoute,
  ProxyRoute: ProxyRoute,
  TermsRoute: TermsRoute,
  GameGameidRoute: GameGameidRoute,
  TagTagRoute: TagTagRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
